
```
+------------------------------------------+
|              ButtonAppBar                | 64px
+----------+-------------------------------+
|          |                               |
|          |                               |
|          |                               |
|          |                               |
| Permanent|          Counter              |
|  Drawer  |         Component             |
|          |         (Centered)            |
|          |                               |
|          |                               |
|          |                               |
|          |                               |
| 240px    |                               |
+----------+-------------------------------+
```

Here's how the CSS properties work together:

1. Outer Box: `display: "flex"`
   - This creates a flex container for the main layout.

2. ButtonAppBar:
   - Position: Fixed at the top
   - Height: 64px

3. PermanentDrawerLeft:
   - Width: 240px
   - Height: 100% of viewport minus AppBar height

4. Main Box (containing Counter):
   ```css
   flexGrow: 1,
   display: "flex",
   justifyContent: "center",
   alignItems: "center",
   height: calc(100vh - 64px),
   marginTop: 64px,
   marginLeft: 240px,
   ```

   - `flexGrow: 1`: Allows this box to expand and fill available space.
   - `display: "flex"`: Makes this box a flex container.
   - `justifyContent: "center"`: Centers the Counter horizontally.
   - `alignItems: "center"`: Centers the Counter vertically.
   - `height: calc(100vh - 64px)`: Sets the height to full viewport height minus AppBar height.
   - `marginTop: 64px`: Pushes the content below the AppBar.
   - `marginLeft: 240px`: Pushes the content to the right of the drawer.

This CSS layout ensures that:
1. The AppBar spans the full width at the top.
2. The Drawer sits on the left side, below the AppBar.
3. The main content area (with the Counter) takes up the remaining space.
4. The Counter is centered both horizontally and vertically in this main area.

The `calc(100vh - 64px)` for height ensures the main area fills the viewport vertically, accounting for the AppBar's height. The margins prevent overlap with the AppBar and Drawer.

This approach creates a responsive layout where the Counter remains centered in the available space, regardless of screen size changes.


#### Lets beautify the component a bit


1. Paper component:
   - `width: 300, height: 300`: Sets a fixed size of 300x300 pixels, making it square.
   - `p: 3`: Adds padding of 3 units (24px by default in MUI) on all sides.
   - `backgroundColor: "#0d253f"`: Sets a dark blue background.
   - `color: "#01b4e4"`: Sets the default text color to light blue.
   - `borderRadius: 2`: Rounds the corners slightly.
   - `display: "flex"`: Uses flexbox for layout.
   - `flexDirection: "column"`: Stacks child elements vertically.
   - `justifyContent: "space-between"`: Distributes space evenly between child elements.

2. First Typography (Counter title):
   - `fontFamily: '"Playwrite MX", Arial, sans-serif'`: Sets the font.
   - `fontWeight: 600`: Makes the font semi-bold.
   - `textAlign: "center"`: Centers the text horizontally.

3. Second Typography (Count display):
   - Similar to the first, but with:
   - `fontWeight: 700`: Makes the font bold.
   - `color: "#90cea1"`: Sets the text color to a light green.

4. Box containing buttons:
   - `display: "flex"`: Uses flexbox for layout.
   - `justifyContent: "center"`: Centers the buttons horizontally.
   - `gap: 2`: Adds space between the buttons.

5. Buttons:
   - `backgroundColor`: Sets the background color (#01b4e4 for Decrease, #90cea1 for Increase).
   - `&:hover`: Defines styles for when the mouse hovers over the button.
   - `color`: Sets the text color (#0d253f for Increase button).

This CSS creates a square container with evenly spaced elements inside, centered text, and custom-styled buttons. The color scheme uses a dark blue background with light blue and green accents.