.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

import React from "react";
import { Box } from "@mui/material";
import ButtonAppBar from "./AppBar";
import PermanentDrawerLeft from "./PermanentDrawer";

import { Provider } from "react-redux";
import { store } from "./store/store";
import Counter from "./components/usestatedemo";

function App() {
  return (
    <Provider store={store}>
      <Box sx={{ display: "flex" }}>
        <ButtonAppBar />
        <PermanentDrawerLeft />

        <Counter />
      </Box>
    </Provider>
  );
}

export default App;

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

import React from "react";
import AppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import InputBase from "@mui/material/InputBase";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import SearchIcon from "@mui/icons-material/Search";
import PersonIcon from "@mui/icons-material/Person";

export default function ButtonAppBar() {
  return (
    <AppBar
      position="fixed"
      sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}
    >
      <Toolbar sx={{ justifyContent: "space-between" }}>
        <Box
          component="img"
          sx={{
            height: 60, // Increased from 64
            width: "auto",
            maxHeight: { xs: 50, sm: 60, md: 70 }, // Adjusted for different screen sizes
            maxWidth: { xs: 160, sm: 200, md: 240 }, // Adjusted for different screen sizes
            marginLeft: 2,
            marginY: 1, // Added vertical margin
          }}
          alt="Filmpire logo"
          src="/images/Academix-logo.png"
        />

        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            backgroundColor: "rgba(255, 255, 255, 0.15)",
            borderRadius: "4px",
            padding: "2px 8px",
            width: "40%",
          }}
        >
          <SearchIcon sx={{ color: "white", mr: 1 }} />
          <InputBase
            placeholder="Search for a Movie..."
            sx={{
              color: "white",
              "& ::placeholder": { color: "white", opacity: 0.7 },
              flexGrow: 1,
            }}
          />
        </Box>

        <Button
          color="inherit"
          startIcon={<PersonIcon />}
          sx={{
            backgroundColor: "rgba(255, 255, 255, 0.1)",
            "&:hover": { backgroundColor: "rgba(255, 255, 255, 0.2)" },
          }}
        >
          LOGIN
        </Button>
      </Toolbar>
    </AppBar>
  );
}

import os

def combine_files(directory, output_file):
    # Get all file names in the directory
    filenames = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]

    # Open the output file
    with open(output_file, 'w') as outfile:
        for fname in filenames:
            # Construct the full file path
            file_path = os.path.join(directory, fname)
            # Ensure that the file is not the output file itself
            if file_path == output_file:
                continue
            # Open and read each file
            with open(file_path, 'r') as readfile:
                # Write the content to the output file
                outfile.write(readfile.read() + '\n')  # Append a newline after each file's content

# Usage example
directory = '.'  # Replace this with your directory path
output_file = 'combined_files.txt'    # The name of the combined output file
combine_files(directory, output_file)


body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

@font-face {
  font-family: "Playwrite MX";
  src: url("/public/fonts/PlaywriteMX-VariableFont_wght.ttf")
    format("truetype-variations");
  font-weight: 100 900;
  font-style: normal;
}


import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

const movie = {
  title: "Inception",
  year: 2010,
  director: "Christopher Nolan",
};

const { title, year } = movie;
console.log(title);
console.log(year);

const [firstMovie, secondMovie] = movies;
console.log(firstMovie);
console.log(secondMovie);

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
let x = 10;
const y = 100;

console.log(y);

import React from "react";
import Box from "@mui/material/Box";
import Drawer from "@mui/material/Drawer";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";

// Import necessary icons
import MovieIcon from "@mui/icons-material/Movie";
import StarIcon from "@mui/icons-material/Star";
import UpcomingIcon from "@mui/icons-material/Upcoming";
import LocalMoviesIcon from "@mui/icons-material/LocalMovies";
import EmojiEmotionsIcon from "@mui/icons-material/EmojiEmotions";
import TheatersIcon from "@mui/icons-material/Theaters";
import DirectionsRunIcon from "@mui/icons-material/DirectionsRun";
import AutoFixHighIcon from "@mui/icons-material/AutoFixHigh";
import ChildCareIcon from "@mui/icons-material/ChildCare";
import PsychologyIcon from "@mui/icons-material/Psychology";
import HistoryEduIcon from "@mui/icons-material/HistoryEdu";
import BloodtypeIcon from "@mui/icons-material/Bloodtype";
import MusicNoteIcon from "@mui/icons-material/MusicNote";

const drawerWidth = 240;

const categories = [
  { name: "Popular", icon: <MovieIcon /> },
  { name: "Top Rated", icon: <StarIcon /> },
  { name: "Upcoming", icon: <UpcomingIcon /> },
];

const genres = [
  { name: "Action", icon: <DirectionsRunIcon /> },
  { name: "Adventure", icon: <AutoFixHighIcon /> },
  { name: "Animation", icon: <ChildCareIcon /> },
  { name: "Comedy", icon: <EmojiEmotionsIcon /> },
  { name: "Crime", icon: <LocalMoviesIcon /> },
  { name: "Documentary", icon: <TheatersIcon /> },
  { name: "Drama", icon: <PsychologyIcon /> },
  { name: "Family", icon: <ChildCareIcon /> },
  { name: "Fantasy", icon: <AutoFixHighIcon /> },
  { name: "History", icon: <HistoryEduIcon /> },
  { name: "Horror", icon: <BloodtypeIcon /> },
  { name: "Music", icon: <MusicNoteIcon /> },
];

const drawerBg = "#0d253f";
const textColor = "#01b4e4";
const hoverBg = "#01b4e4";
const hoverText = "#ffffff";
const dividerColor = "#01b4e4";

export default function PermanentDrawerLeft() {
  return (
    <Drawer
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        "& .MuiDrawer-paper": {
          width: drawerWidth,
          boxSizing: "border-box",
          backgroundColor: drawerBg,
          color: textColor,
          top: 64,
          height: "calc(100% - 64px)",
        },
      }}
      variant="permanent"
      anchor="left"
    >
      <Box sx={{ overflow: "auto", mt: 2 }}>
        <Typography
          variant="subtitle1"
          sx={{
            px: 2,
            py: 1,
            fontFamily: '"Playwrite MX", Arial, sans-serif',
            fontWeight: 600,
            fontSize: "20px",
            color: "#90cea1",
          }}
        >
          Categories
        </Typography>
        <List>
          {categories.map((item) => (
            <ListItem key={item.name} disablePadding>
              <ListItemButton
                sx={{
                  "&:hover": {
                    backgroundColor: hoverBg,
                    "& .MuiListItemIcon-root, & .MuiTypography-root": {
                      color: hoverText,
                    },
                  },
                }}
              >
                <ListItemIcon sx={{ color: textColor, minWidth: 40 }}>
                  {item.icon}
                </ListItemIcon>
                <ListItemText
                  primary={item.name}
                  sx={{
                    "& .MuiTypography-root": {
                      fontFamily: '"Playwrite MX", Arial, sans-serif',
                      fontWeight: 400,
                    },
                  }}
                />
              </ListItemButton>
            </ListItem>
          ))}
        </List>
        <Divider sx={{ my: 1, backgroundColor: dividerColor }} />
        <Typography
          variant="subtitle1"
          sx={{
            px: 2,
            py: 1,
            fontFamily: '"Playwrite MX", Arial, sans-serif',
            fontWeight: 600,
            fontSize: "20px",
            color: "#90cea1",
          }}
        >
          Genres
        </Typography>
        <List>
          {genres.map((item) => (
            <ListItem key={item.name} disablePadding>
              <ListItemButton
                sx={{
                  "&:hover": {
                    backgroundColor: hoverBg,
                    "& .MuiListItemIcon-root, & .MuiTypography-root": {
                      color: hoverText,
                    },
                  },
                }}
              >
                <ListItemIcon sx={{ color: textColor, minWidth: 40 }}>
                  {item.icon}
                </ListItemIcon>
                <ListItemText
                  primary={item.name}
                  sx={{
                    "& .MuiTypography-root": {
                      fontFamily: '"Playwrite MX", Arial, sans-serif',
                      fontWeight: 400,
                    },
                  }}
                />
              </ListItemButton>
            </ListItem>
          ))}
        </List>
      </Box>
    </Drawer>
  );
}

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

// src/tmdbConfig.js
export const TMDB_API_KEY = "49a5508b99e54cbf67438655e1565e32";
export const TMDB_BASE_URL = "https://api.themoviedb.org/3";

